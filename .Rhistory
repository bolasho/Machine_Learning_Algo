str(df)
names(df)
df<-df[-c(1,3,4,5,7,9,10,13,24,26)]
df$PickUp_Time<- as.integer(df$PickUp_Time)
df$DropOff_Time<- as.integer(df$DropOff_Time)
df$claim_or_not<- as.factor(df$claim_or_not)
df$prepaid_rental<- as.factor(df$prepaid_rental)
df$Bundled<- as.factor(df$Bundled)
str(df)
df<-df[-c(15)]
str(df)
df<- as.data.table(df)
smp_size <- floor(0.75 * nrow(df))
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
View(train)
library(stats)
library(caret)
library(randomForest)
fit <- randomForest(claim_or_not ~ ., data = data_balanced_over,importance=TRUE, ntree=200)
varImpPlot(fit)
fit <- randomForest(claim_or_not ~ ., data = train,importance=TRUE, ntree=200)
varImpPlot(fit)
names(train)
train<-train[-c(2,3,4,9)]
test<-test[-c(2,3,4,9)]
train<-train[,-c(2,3,4,9)]
train<-train[,-c(2,3,4,9)]
View(train)
df<- as.data.table(df)
smp_size <- floor(0.75 * nrow(df))
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
train<-train[-c(2,3,4,9)]
train<-train[,-c(2,3,4,9)]
df<- as.data.table(df)
smp_size <- floor(0.75 * nrow(df))
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
train<-train[-c(2,3,4,9)]
train<-train[-c(2,3,4,9),]
df<-df[-c(2,3,4,9)]
df<-df[-c(2,3,4,9)]
View(df)
df<-df[,-c(2,3,4,9)]
df<-ADM.Project.Data
df<-df[-c(1,3,4,5,7,9,10,13,24,26)]
df$PickUp_Time<- as.integer(df$PickUp_Time)
df$DropOff_Time<- as.integer(df$DropOff_Time)
df$claim_or_not<- as.factor(df$claim_or_not)
df$prepaid_rental<- as.factor(df$prepaid_rental)
df$Bundled<- as.factor(df$Bundled)
df<-df[-c(15)]
df<-df[-c(2,3,4,9)]
library(data.table)
library(stats)
library(caret)
df<- as.data.table(df)
smp_size <- floor(0.75 * nrow(df))
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
library(stats)
library(caret)
library(randomForest)
fit <- randomForest(claim_or_not ~ ., data = train,importance=TRUE, ntree=200)
Prediction <- predict(fit, test)
confusionMatrix(test$claim_or_not,Prediction )
library(ROSE)
library(rpart)
treeimb <- rpart(claim_or_not ~ ., data = train)
pred.treeimb <- predict(treeimb, newdata = test,type="class")
accuracy.meas(test$claim_or_not, pred.treeimb)
roc.curve(test$claim_or_not, pred.treeimb, plotit = F)
data_balanced_over <- ovun.sample(claim_or_not ~ ., data = train, method = "over",p=0.5)$data
table(data_balanced_over$claim_or_not)
data_balanced_under <- ovun.sample(claim_or_not ~ ., data = train, method = "under", p=0.5, seed = 1)$data
table(data_balanced_under$claim_or_not)
data_balanced_both <- ovun.sample(claim_or_not ~ ., data = train, method = "both", p=0.5,                             N=1000, seed = 1)$data
table(data_balanced_both$claim_or_not)
data.rose <- ROSE(claim_or_not ~ ., data = train, seed = 1)$data
table(data.rose$claim_or_not)
tree.rose <- rpart(claim_or_not ~ ., data = data.rose)
tree.over <- rpart(claim_or_not ~ ., data = data_balanced_over)
tree.under <- rpart(claim_or_not ~ ., data = data_balanced_under)
tree.both <- rpart(claim_or_not ~ ., data = data_balanced_both)
pred.tree.rose <- predict(tree.rose, newdata = test,type= "class")
pred.tree.over <- predict(tree.over, newdata = test,type= "class")
pred.tree.under <- predict(tree.under, newdata = test,type= "class")
pred.tree.both <- predict(tree.both, newdata = test,type= "class")
roc.curve(test$claim_or_not, pred.tree.rose)
table(test$claim_or_not, pred.tree.rose)
confusionMatrix(test$claim_or_not, pred.tree.rose)
roc.curve(test$claim_or_not, pred.tree.over)
confusionMatrix(test$claim_or_not, pred.tree.over)
roc.curve(test$claim_or_not, pred.tree.under)
confusionMatrix(test$claim_or_not, pred.tree.under)
roc.curve(test$claim_or_not, pred.tree.both)
confusionMatrix(test$claim_or_not, pred.tree.both)
fit <- randomForest(claim_or_not ~ ., data = tdata.rose,importance=TRUE, ntree=200)
fit <- randomForest(claim_or_not ~ ., data = data.rose,importance=TRUE, ntree=200)
Prediction <- predict(fit, test)
confusionMatrix(test$claim_or_not,Prediction )
fit <- randomForest(claim_or_not ~ ., data = data_balanced_over,importance=TRUE, ntree=1000)
Prediction <- predict(fit, test)
confusionMatrix(test$claim_or_not,Prediction )
library(xgboost)
library(readr)
library(stringr)
library(caret)
train2<-train
test2<-test
y=as.integer(train2$claim_or_not)
train2<-as.data.frame(train)
test2<-as.data.frame(test)
y=as.integer(train2$claim_or_not)
train2$claim_or_not<-as.integer(train2$claim_or_not)
df<-ADM.Project.Data
#df1<- df[,sapply(df, is.numeric)]
str(df)
names(df)
#remove variables with factors over 50
df<-df[-c(1,3,4,5,7,9,10,13,24,26)]
View(df)
#convert  variables to correct data types
df$PickUp_Time<- as.integer(df$PickUp_Time)
df$DropOff_Time<- as.integer(df$DropOff_Time)
df$claim_or_not<- as.factor(df$claim_or_not)
df$prepaid_rental<- as.factor(df$prepaid_rental)
df$Bundled<- as.factor(df$Bundled)
str(df)
names(df)
df<-df[-c(15)]
df<-df[-c(2,3,4,9)]
#df <- ADM.Project.Data[, -c(1, 2, 4,7) ]
View(df)
library(data.table)
library(stats)
library(caret)
df<- as.data.table(df)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(df))
## set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
train2<-as.data.frame(train)
test2<-as.data.frame(test)
y=as.integer(train2$claim_or_not)
train2$claim_or_not<-as.integer(train2$claim_or_not)
test2$claim_or_not<-as.integer(test2$claim_or_not)
summary(y)
y<-ifelse (y==1,0,1)
summary(y)
xgb <- xgboost(data = data.matrix(train[,-1]),
label = y,
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3
)
xgb <- xgboost(data = data.matrix(train2[,-1]),
label = y,
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3
)
y_pred <- predict(xgb, data.matrix(test2[,-1]))
confusionMatrix(test2$claim_or_not,y_pred)
y_pred
model <- xgb.dump(y_pred, with.stats = T)
pred <- predict(y_pred, test2$claim_or_not)
err <- mean(as.numeric(pred > 0.5) != test2$claim_or_not)
pred<-ifelse (y_pred < 0.5,0,1)
pred <- predict(y_pred, test2$claim_or_not)
pred
pred <- predict(pred, test2$claim_or_not)
err <- mean(as.numeric(pred > 0.5) != test2$claim_or_not)
print(paste("test-error=", err))
library(readr)
Demographics <- read_csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Demographics.csv")
View(Demographics)
Demographics<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Demographics.csv")
View(Demographics)
Previous_Loan<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Previous Loan Holdings.csv")
View(Previous_Loan)
Previous_Loan<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Previous Loan Holdings.csv",header = TRUE)
View(Previous_Loan)
Previous_Loan<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Previous Loan Holdings.csv",header = FALSE)
View(Previous_Loan)
Previous_Loan<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Previous Loan Holdings.csv",header = TRUE,skip = 1)
View(Previous_Loan)
Product_held<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Product Held in Bank.csv",header = TRUE,skip = 1)
View(Product_held)
Loan_Flag<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Purchased loan Flag.csv",header = TRUE,skip = 1)
View(loants)
View(Loan_Flag)
Transaction_out<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Transactions out of CA.csv",header = TRUE,skip = 1)
View(Transaction_out)
Transaction_Amount<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/TXN Amount.csv",header = TRUE,skip = 1)
Previous_Loan<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Previous Loan Holdings.csv",header = TRUE,skip = 1,sep=" ", colClasses=c("NULL", NA, NA))
View(Previous_Loan)
Demographics<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Demographics.csv")[ ,1:3]
View(Demographics)
Previous_Loan<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Previous Loan Holdings.csv",header = TRUE,skip = 1)[ ,1:2]
View(Previous_Loan)
Product_held<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Product Held in Bank.csv",header = TRUE,skip = 1)[ ,1:2]
Loan_Flag<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Purchased loan Flag.csv",header = TRUE,skip = 1)[ ,1:2]
Transaction_out<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Transactions out of CA.csv",header = TRUE,skip = 1)[ ,1:2]
Transaction_Amount<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/TXN Amount.csv",header = TRUE,skip = 1)[ ,1:2]
All_data<- Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "Client ID", all = TRUE),
list(Demographics,Previous_Loan,Product_held,Loan_Flag,Transaction_out,Transaction_Amount))
All_data<- Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "Client ID"),
list(Demographics,Previous_Loan,Product_held,Loan_Flag,Transaction_out,Transaction_Amount))
all_data<-merge(Demographics,Previous_Loan,Product_held,Loan_Flag,Transaction_out,Transaction_Amount, by='Client ID')
all_data<-merge(Demographics,Previous_Loan,by='Client ID')
View(Transaction_Amount)
View(Transaction_out)
View(Demographics)
All_data<- Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "Client.ID"),
list(Demographics,Previous_Loan,Product_held,Loan_Flag,Transaction_out,Transaction_Amount))
View(All_data)
summary(All_data)
write.csv(All_data,"C:\Users\bola\Desktop\bolacareer\BOI_Case_Study")
write.csv(All_data,"C:\Users\bola\Desktop\bolacareer\BOI_Case_Study\customer_loan.csv")
write.csv(All_data,"C:\\Users\\bola\\Desktop\\bolacareer\\BOI_Case_Study\\customer_loan.csv")
Demographics<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Demographics.csv")
View(Demographics)
View(All_data)
names(All_data)
library(plyr)
rename(All_data, c("Gender..1..Female..2..Male"="Gender", "X..Products.in.bank"="NO_Of_Products",
"X...Transactions.out.of.CA.in.past.2.mths"="Trans_out_CA","Average.amount.of.CA.transaction"="Average_CA_Trans"))
install.packages("outliers")
library(outliers)
outlier_tf1 = outlier(All_data,logical=TRUE)
All_data1rename(All_data, c("Gender..1..Female..2..Male"="Gender", "X..Products.in.bank"="NO_Of_Products",
"X...Transactions.out.of.CA.in.past.2.mths"="Trans_out_CA","Average.amount.of.CA.transaction"="Average_CA_Trans"))
All_data1<-rename(All_data, c("Gender..1..Female..2..Male"="Gender", "X..Products.in.bank"="NO_Of_Products",
"X...Transactions.out.of.CA.in.past.2.mths"="Trans_out_CA","Average.amount.of.CA.transaction"="Average_CA_Trans"))
outlier_tf1 = outlier(All_data1$Average_CA_Trans,logical=TRUE)
bx <- boxplot(All_data1$Average_CA_Trans)
str(All_data1)
All_data1$Average_CA_Trans<-gsub(All_data1$Average_CA_Trans,"€","")
Str(All_data1)
str(All_data1)
summary(All_data1$Average_CA_Trans)
All_data1$Average_CA_Trans<- as.numeric(All_data1$Average_CA_Trans)
summary(All_data1$Average_CA_Trans)
All_data1<-rename(All_data, c("Gender..1..Female..2..Male"="Gender", "X..Products.in.bank"="NO_Of_Products",
"X...Transactions.out.of.CA.in.past.2.mths"="Trans_out_CA","Average.amount.of.CA.transaction"="Average_CA_Trans"))
All_data1$Average_CA_Trans<-gsub("€", "", All_data1$Average_CA_Trans, perl = TRUE)
str(All_data1)
All_data1$Average_CA_Trans<- as.numeric(All_data1$Average_CA_Trans)
summary(All_data1$Average_CA_Trans)
Transaction_out<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Transactions out of CA.csv",header = TRUE,skip = 1)[ ,1:2]
All_data<- Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "Client.ID"),
list(Demographics,Previous_Loan,Product_held,Loan_Flag,Transaction_out,Transaction_Amount))
All_data1<-rename(All_data, c("Gender..1..Female..2..Male"="Gender", "X..Products.in.bank"="NO_Of_Products",
"X...Transactions.out.of.CA.in.past.2.mths"="Trans_out_CA","Average.amount.of.CA.transaction"="Average_CA_Trans"))
str(All_data1)
Transaction_Amount<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/TXN Amount.csv",header = TRUE,skip = 1)[ ,1:2]
All_data<- Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "Client.ID"),
list(Demographics,Previous_Loan,Product_held,Loan_Flag,Transaction_out,Transaction_Amount))
All_data1<-rename(All_data, c("Gender..1..Female..2..Male"="Gender", "X..Products.in.bank"="NO_Of_Products",
"X...Transactions.out.of.CA.in.past.2.mths"="Trans_out_CA","Average.amount.of.CA.transaction"="Average_CA_Trans"))
str(All_data1)
Transaction_out<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Transactions out of CA.csv",header = TRUE,skip = 1)[ ,1:2]
Transaction_Amount<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/TXN Amount.csv",header = TRUE,skip = 1)[ ,1:2]
Transaction_out<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Transactions out of CA.csv",header = TRUE,skip = 1)[ ,1:2]
All_data<- Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "Client.ID"),
list(Demographics,Previous_Loan,Product_held,Loan_Flag,Transaction_out,Transaction_Amount))
All_data1<-rename(All_data, c("Gender..1..Female..2..Male"="Gender", "X..Products.in.bank"="NO_Of_Products",
"X...Transactions.out.of.CA.in.past.2.mths"="Trans_out_CA","Average.amount.of.CA.transaction"="Average_CA_Trans"))
str(All_data1)
All_data1$Average_CA_Trans
View(Transaction_Amount)
Transaction_Amount<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/TXN Amount.csv",header = TRUE,skip = 1)[ ,1:2]
View(Transaction_Amount)
Transaction_Amount<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/TXN Amount.csv",header = TRUE,skip = 1)[ ,1:2]
View(Transaction_Amount)
All_data<- Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "Client.ID"),
list(Demographics,Previous_Loan,Product_held,Loan_Flag,Transaction_out,Transaction_Amount))
All_data1<-rename(All_data, c("Gender..1..Female..2..Male"="Gender", "X..Products.in.bank"="NO_Of_Products",
"X...Transactions.out.of.CA.in.past.2.mths"="Trans_out_CA","Average.amount.of.CA.transaction"="Average_CA_Trans"))
str(All_data1)
All_data1$Trans_thirty_five<- ifelse(All_data1$Trans_out_CA < 35 ,0,1) #derived attributes
All_data1$Average_CA_Trans<- as.numeric(All_data1$Average_CA_Trans)
str(All_data1)
All_data1$ Loan.Flag<-as.factor(All_data1$ Loan.Flag)
All_data1$Gender<-as.factor(All_data1$Gender)
All_data1$Trans_thirty_five<- ifelse(All_data1$Trans_out_CA < 35 ,0,1) #derived attributes
str(All_data1)
All_data1$Trans_thirty_five<-as.factor(All_data1$Trans_thirty_five)
str(All_data1)
summary(All_data1)
bx <- boxplot(All_data1$Average_CA_Trans)
str(bx)
x2 <- x[!(All_data1$Average_CA_Trans %in% bx$out)]
x2 <- All_data1$Average_CA_Trans[!(All_data1$Average_CA_Trans %in% bx$out)]
x2
hist(X2)
boxplot(x2)
hist(x2)
bb<- for (i in All_data1$Average_CA_Trans){
if(i > 2700){
delete(i){
else{
return (i)
}
}
}
}
bb<- for (i in All_data1$Average_CA_Trans){
if(i > 2700){
delete(i){
else{
return (i)
}
}
}
bx <- boxplot(All_data1$Average_CA_Trans)
str(bx)
x2 <- All_data1$Average_CA_Trans[!(All_data1$Average_CA_Trans %in% bx$out)]
x2
hist(x2)
bb<- for (i in All_data1$Average_CA_Trans)
if(i > 2700){
delete(i){
else{
return (i)
}
}
}
bb<- for (i in All_data1$Average_CA_Trans){
if(i > 2700){
delete(i){
else{
return (i)
}
}
}
bx <- boxplot(All_data1$Average_CA_Trans)
str(bx)
x2 <- All_data1$Average_CA_Trans[!(All_data1$Average_CA_Trans %in% bx$out)]
x2
hist(x2)
bb<- for (i in All_data1$Average_CA_Trans){
if(i > 2700){
delete(i){
else{
return (i)
}
}
}
bb<- for (i in All_data1$Average_CA_Trans){
if(i > 2700)
delete(i){
else{
return (i)
}
}
bb<- for (i in All_data1$Average_CA_Trans){
if(i > 2700)
delete(i)
{else
return (i)
}
}
bb<- for (i in All_data1$Average_CA_Trans){
if(i > 2700)
delete(i)
else
return (i)
}
bb<- for (i in All_data1$Average_CA_Trans){
if(i > 2700)
delete(i)
else
return (i<2700)
}
bb<- for (i in All_data1$Average_CA_Trans){
if(i > 2700)
delete(i)
else
print (i<2700)
}
myData = All_data1[All_data1$Trans_out_CA < 2700,]
myData = All_data1[All_data1$Trans_out_CA < 2700,]
myData = All_data1[All_data1$Trans_out_CA < 2700,]
View(myData)
myData = All_data1$Average_CA_Trans[All_data1$Trans_out_CA < 2700,]
myData = All_data1$[All_data1$Trans_out_CA < 2700,]
myData = All_data1[All_data1$Trans_out_CA < 2700,]
View(myData)
summary(myData$Trans_out_CA)
myData = All_data1[All_data1$Average_CA_Trans< 2700,]
summary(myData$Trans_out_CA)
summary(myData$Average_CA_Trans)
All_data1$Average_CA_Trans = All_data1[All_data1$Average_CA_Trans< 2700,]
summary(myData$Average_CA_Trans)
All_data1$Age = All_data1[All_data1$Age > 70,]
summary(myData$Age)
All_data1$Age = All_data1[All_data1$Age < 70,]
summary(myData$Age)
All_data1$Age = All_data1[All_data1$Age > 70,]
summary(myData$Age)
All_data1$Average_CA_Trans = All_data1[All_data1$Average_CA_Trans< 2700,]
summary(myData$Average_CA_Trans)
All_data1$Age = All_data1[All_data1$Age < 70,]
summary(myData$Age)
All_data1$Age = All_data1[All_data1$Age <= 70,]
summary(myData$Age)
summary(All_data1$Average_CA_Trans)
summary(All_data1$Age)
a<-subset(All_data1, Age<= 70)
View(a)
All_data1<-subset(All_data1, Age<= 70) # remove age over 70yrs
All_data1<-subset(All_data1, Average_CA_Trans<= 2700) # remove age over 70yrs
summary(All_data1)
length(unique(All_data1$Client.ID)) #count unique client id
n_occur <- data.frame(table(All_data1$Client.ID))
n_occur
n_occur[n_occur$Freq > 1,]
length(unique(All_data$Client.ID)) #count unique client id( 9763)
n_occur <- data.frame(table(All_data$Client.ID))
n_occur[n_occur$Freq > 1,]
n_occur <- data.frame(table(All_data1$Client.ID))
n_occur[n_occur$Freq > 1,]
deduped <- unique( All_data1 )
View(deduped)
View(deduped$Client.ID=='1220')
length(unique(All_data$Client.ID)) #count unique client id( 10000)
n_occur <- data.frame(table(All_data$Client.ID))
n_occur[n_occur$Freq > 1,]
All_data<- Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "Client.ID"),
list(Demographics,Previous_Loan,Product_held,Loan_Flag,Transaction_out,Transaction_Amount))
length(unique(All_data$Client.ID)) #count unique client id( 10000)
n_occur <- data.frame(table(All_data$Client.ID))
n_occur[n_occur$Freq > 1,]
View(All_data)
names(All_data)
setwd("C:/Users/bola/Desktop/self learning materials/udemy_data_science_course/A-Z Machine Learning Couse/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 6 - Polynomial Regression/Polynomial_Regression")
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
View(dataset)
lin_reg = lm(formula = Salary ~ .,
data = dataset)
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
View(dataset)
poly_reg = lm(formula = Salary ~ .,
data = dataset)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
predict(lin_reg, data.frame(Level = 6.5))
predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
predict(lin_reg, data.frame(Level = X))
predict(lin_reg, data.frame(Level =dataset$Salary))
